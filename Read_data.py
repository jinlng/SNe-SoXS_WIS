
"""*******************************************************
This file has functions that read all kinds of photometric data formats
******************************************************"""
#print __doc__

import numpy as np
import magnitudes
import pylab
import pyphot
import csv
import get_filter

def read_mark_lc(File):
	"""Description: Read PTF subtraction light curves generated by Mark S. program.
	Input  :- File.
	Output :- Light curve [MJD, Mag, MagErr, count, count error, flux, fluxerror] calculated in python
	 Tested : ?
	     By : Maayane T. Soumagnac Nov 2016
	    URL :
	 Example:C_P48,ZP_P48,LC_P48_matlab,ZP_P48_matlab,BinLC_P48,BinConLC_P48=Read_data.read_mark_lc('path_to_file',BinVec=Binvec,BinType='Time',BinSize=1.)
	 Reliable:  """
	print('I am reading Mark data')
	LC_data=np.genfromtxt(File,delimiter=None,skip_header=12,dtype=str)
	MJD=LC_data[:,0].astype(np.float)
	counts=LC_data[:,1].astype(np.float)
	dcounts=LC_data[:,2].astype(np.float)
	zero_points=LC_data[:,3].astype(np.float)
	mag=zero_points-2.5*np.log10(counts)
	#print 'zero-pointssssss',zero_points
	#print np.log10(counts)
	magerr=1.086*dcounts/counts #car dmag=(2.5/ln(10))*dcount/count
	Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/P48_R_T.rtf',
								 delimiter=None)
	P = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='PTF_P48_R', dtype='photon',
					  unit='Angstrom')
	#print P.AB_zero_flux.magnitude
	A=(zero_points)/-2.5
	flux=counts*10**(A)*P.AB_zero_flux.magnitude
	flux_err=dcounts*10**(A)*P.AB_zero_flux.magnitude
	LC=np.array(list(zip(MJD,mag,magerr,counts,dcounts,flux,flux_err,zero_points)))


	return LC

def read_mark_lc_wMatlab(File, BinVec=None, BinType=None, BinSize=None, Randomize=False):
	"""Description: Read PTF subtraction light curves generated by Mark S. program.
	Input  :- File.
			- Binning vector [MJD]. This is a column vector of edges defines
			the bins. Alternatively, a two column vector in which the first (second)
			column is for the start (end) time of each bin.
			- In addition to a predefined bins, the program can calculate
			the light curve in a constant bins of either constant
			Number of points or constant time span.BinType can be:
			'Time' - for constant time span.
			'Num'  - for constant number of points.
			- Time span or number of points in bins.
			- Randomize the data points (i.e., assign random dates),
			{true|false}. Default is false.
	Output :- Light curve [MJD, Mag, MagErr, 3sigma limit, count, count error] calculated in python
			- Zero point calculatedin python
			- Light curve calculted in matlab
			- Zero point calculatedin python
			- Binned light curve, in the pre-defined bins defined
			in BinVec. The matrix contains the following columns:
			(1) Mean time [MJD]
			(2) Err Time low [day]
			(3) Err Time up [day]
			(4) Number of observations
			(5) Mag
			(6) Mag Err
			(7) Mag limit
			(8) median Flux
			(9) Flux Err
			(10) Mag Err derived by bootstrap simulations
			(11) Flux Err derived by bootstrap simulations
			- Binned light curve in the constant number/time-span bins.
			The matrix contains the following columns:
			(1) Mid time
			(2) Median flux in bin.
			(3) Std of flux in bin divided by the number of points in bin.
			(4) Median flux error in bin.
			(5) Number of measurements in bin.
			(6) Bootstrap Std of flux in bin.
			(7) Jackknife Std of flux in bin.
	 Tested : ?
	     By : Maayane T. Soumagnac Nov 2016
	    URL :
	 Example:C_P48,ZP_P48,LC_P48_matlab,ZP_P48_matlab,BinLC_P48,BinConLC_P48=Read_data.read_mark_lc('path_to_file',BinVec=Binvec,BinType='Time',BinSize=1.)
	 Reliable:  """
	print('I am reading Mark data')
	import matlab.engine
	eng = matlab.engine.start_matlab()
	eng.cd(r'/Users/maayanesoumagnac/Maayane_Astro_python_library/fun/matlab_functions/')
	Nsig=3.
	LC_data=np.genfromtxt(File,delimiter=None,skip_header=12,dtype=str)
	MJD=LC_data[:,0].astype(np.float)
	counts=LC_data[:,1].astype(np.float)
	dcounts=LC_data[:,2].astype(np.float)
	zero_points=LC_data[:,3].astype(np.float)
	mag=zero_points-2.5*np.log10(counts)
	#print np.log10(counts)
	magerr=1.086*dcounts/counts
	N_sig_lim=zero_points-2.5*np.log10(Nsig*dcounts)
	LC=np.array(list(zip(MJD,mag,magerr,N_sig_lim,counts,dcounts)))
	LC_matlab,ZP_matlab,BinLC,BinConLC=eng.read_mark_lc(File,nargout=4)
	# print np.shape(MJD)
	# print np.shape(mag)
	#print np.shape(LC)x
	ZP=zero_points
	BinLC=[]
	BinConLC=[]
	if (BinVec!=None) and (BinType==None): #DO MY OWN
		BinVec_format = matlab.double(BinVec.tolist())
		# BinVec=matlab.double(BinVec)
		LC_matlab, ZP_matlab, BinLC, BinConLC = eng.read_mark_lc(File, BinVec_format,nargout=4)
		LC_matlab = np.array(LC_matlab)
		ZP_matlab = np.array(ZP_matlab)
		print(BinLC)
		BinLC = np.array(BinLC)
		BinConLC = np.array(BinConLC)
	elif (BinVec!=None) or (BinType!=None) or (Randomize!=False): #DO MY OWN
		BinVec_format = matlab.double(BinVec.tolist())
		#BinVec=matlab.double(BinVec)
		LC_matlab, ZP_matlab, BinLC, BinConLC = eng.read_mark_lc(File,BinVec_format,BinType,BinSize,Randomize,nargout=4)
		LC_matlab=np.array(LC_matlab)
		ZP_matlab=np.array(ZP_matlab)
		print(BinLC)
		BinLC=np.array(BinLC)
		BinConLC=np.array(BinConLC)
	return LC,ZP,LC_matlab,ZP_matlab,BinLC,BinConLC

def read_galex_lc(File,filter,sky_level=0):
    """Description: Read Galex light curves generated by Noam Ganot.
        Input  :- File.
        		-Filter name. Can be 'nuv' or 'fuv'. This determines the conversions from counts to flux, as detailed in https://asd.gsfc.nasa.gov/archive/galex/FAQ/counts_background.html
        		-sky_level: value to subtract to the flux column
        Output :- Light curve [MJD,flux [erg sec-1 cm-2 A-1],flux_error,counts,error_counts,absmag,error_mag]
         Tested : ?
             By : Maayane T. Soumagnac Nov 2016
            URL :
         Example:LC,ZP,BinLC,BinConLC=read_mark_lc(File,BinVec,BinType,BinSize,Randomize);
         Reliable:  """
    print('I am reading GALEX data')
    NUV_data=np.genfromtxt(File,delimiter=None)
    MJD_NUV=NUV_data[:,0]+56000
    flux_NUV=NUV_data[:,1]-sky_level
    #print(flux_NUV)
    #print(sky_level)
    #pdb.set_trace()
    error_flux_NUV=NUV_data[:,2]
    if filter=='nuv':
        f_ref=2.06*10**(-16)
        counts_NUV=flux_NUV/(2.06*10**(-16))
        print(counts_NUV)
        #pdb.set_trace()
        error_counts_NUV=error_flux_NUV/(2.06*10**(-16)) #MAKE SUR I UNDERSTAND WHY
        ABmag_NUV=-2.5*np.log10(counts_NUV)+20.08
        error_mag_NUV=np.abs(-1.08*error_counts_NUV/counts_NUV) #2.05/2.303 car ln=2.303log
    LC_nuv=np.array(list(zip(MJD_NUV,flux_NUV,error_flux_NUV,counts_NUV,error_counts_NUV,ABmag_NUV,error_mag_NUV)))
    return LC_nuv

def read_data_Marshall(path,plot_all=True):
    """Description: Reads data from a file downloaeded from the Marshall and outputs as many dictionnaries as filters,
    with the relevant data in them
        Input  :- a path to an ascii file downloaded from the Marshall
                - plot_all: if True, plots all the light curves for each filter
        Output :-data_dict: list of dictionnaries, with keys ['jd','mag','magerr','flux','fluxerr','absmag','absmagerr'] and values a numpy array
        with the corresponding data
        Tested : ?
             By : Maayane T. Soumagnac Nov 2016
            URL :
        Example:
        Reliable:  """
    data_dic=dict()
    #from the Marshal "export light curve"
    with open(path) as csvfile:
            readCSV = csv.reader(csvfile, delimiter=',',skipinitialspace=True)
            headers = next(readCSV)#skip the header
            dates_mjd = []
            filt = []
            absmag = []
            mag = []
            magerr = []
            instr = []
            for row in readCSV:
                date_mjd = float(row[1])
                fi = row[2]
                absm = float(row[3])
                ma = float(row[4])
                maerr = float(row[5])
                inst = row[7]
                dates_mjd.append(date_mjd)
                #print(dates_mjd)
                filt.append(fi)
                absmag.append(absm)
                mag.append(ma)
                magerr.append(maerr)
                instr.append(inst)
    dates=np.array(dates_mjd,dtype=float)
    filt=np.array(filt,dtype=str)
    absmag=np.array(absmag,dtype=float)
    mag=np.array(mag,dtype=float)
    magerr=np.array(magerr,dtype=float)
    instr=np.array(instr,dtype=str)

    #print(dates_mjd)
    #print(filt)

    ############### Swift ###############

    #UVW1
    if 'UVW1' in filt:
        print('UVW1 is among the filters')
        data_UVW1=dict()
        mag_UVW1=mag[(filt=='UVW1')]
        magerr_UVW1 = magerr[filt == 'UVW1']
        #print(mag_UVW1)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/Swift_UVW1.rtf', delimiter=None)
        Filter_UVW1 = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='UW1', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_UVW1=magnitudes.magAB_in_filter_to_flux_in_filter(mag_UVW1,Filter_vector=None,Filter_object=Filter_UVW1).magnitude
        #print(flux_UVW1)
        fluxerr_UVW1=magnitudes.error_on_mag_into_error_on_flux(magerr_UVW1,flux_UVW1)
        data_UVW1['jd']=dates[(filt=='UVW1')]
        data_UVW1['mag']=mag_UVW1
        data_UVW1['magerr']=magerr_UVW1
        data_UVW1['flux']=flux_UVW1
        data_UVW1['fluxerr']=fluxerr_UVW1
        data_UVW1['absmag']=absmag[(filt=='UVW1')]
        data_UVW1['absmagerr']=magerr_UVW1
        if plot_all==True:
            pylab.figure()
            pylab.errorbar(data_UVW1['jd'],data_UVW1['flux'],yerr=data_UVW1['fluxerr'])
            pylab.title('Flux in UVW1')

            pylab.figure()
            pylab.errorbar(data_UVW1['jd'],data_UVW1['mag'],yerr=data_UVW1['magerr'])
            pylab.title('Mag in UVW1')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_UVW1['jd'],data_UVW1['absmag'],yerr=data_UVW1['absmagerr'])
            pylab.title('AbsMag in UVW1')
            pylab.gca().invert_yaxis()
        #pylab.show()
        data_dic['UVW1']=data_UVW1 #adds the data_UVW1 to the dictionnaries

    #UVW2
    if 'UVW2' in filt:
        print('UVW2 is among the filters')
        data_UVW2=dict()
        mag_UVW2=mag[(filt=='UVW2')]
        magerr_UVW2 = magerr[filt == 'UVW2']
        #print(mag_UVW2)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/Swift_UVW2.rtf', delimiter=None)
        Filter_UVW2 = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='UW1', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_UVW2=magnitudes.magAB_in_filter_to_flux_in_filter(mag_UVW2,Filter_vector=None,Filter_object=Filter_UVW2).magnitude
        #print(flux_UVW2)
        fluxerr_UVW2=magnitudes.error_on_mag_into_error_on_flux(magerr_UVW2,flux_UVW2)
        data_UVW2['jd']=dates[(filt=='UVW2')]
        data_UVW2['mag']=mag_UVW2
        data_UVW2['magerr']=magerr_UVW2
        data_UVW2['flux']=flux_UVW2
        data_UVW2['fluxerr']=fluxerr_UVW2
        data_UVW2['absmag']=absmag[(filt=='UVW2')]
        data_UVW2['absmagerr']=magerr_UVW2
        if plot_all == True:
            pylab.figure()
            pylab.errorbar(data_UVW2['jd'],data_UVW2['flux'],yerr=data_UVW2['fluxerr'])
            pylab.title('Flux in UVW2')

            pylab.figure()
            pylab.errorbar(data_UVW2['jd'],data_UVW2['mag'],yerr=data_UVW2['magerr'])
            pylab.title('Mag in UVW2')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_UVW2['jd'],data_UVW2['absmag'],yerr=data_UVW2['absmagerr'])
            pylab.title('AbsMag in UVW2')
            pylab.gca().invert_yaxis()
        #pylab.show()
        data_dic['UVW2'] = data_UVW2  # adds the data_UVW2 to the dictionnaries

    #UVM2
    if 'UVM2' in filt:
        print('UVM2 is among the filters')
        data_UVM2=dict()
        mag_UVM2=mag[(filt=='UVM2')]
        magerr_UVM2 = magerr[filt == 'UVM2']
        #print(mag_UVM2)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/Swift_UVM2.rtf', delimiter=None)
        Filter_UVM2 = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='UW1', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_UVM2=magnitudes.magAB_in_filter_to_flux_in_filter(mag_UVM2,Filter_vector=None,Filter_object=Filter_UVM2).magnitude
        #print(flux_UVM2)
        fluxerr_UVM2=magnitudes.error_on_mag_into_error_on_flux(magerr_UVM2,flux_UVM2)
        data_UVM2['jd']=dates[(filt=='UVM2')]
        data_UVM2['mag']=mag_UVM2
        data_UVM2['magerr']=magerr_UVM2
        data_UVM2['flux']=flux_UVM2
        data_UVM2['fluxerr']=fluxerr_UVM2
        data_UVM2['absmag']=absmag[(filt=='UVM2')]
        data_UVM2['absmagerr']=magerr_UVM2
        if plot_all == True:
            pylab.figure()
            pylab.errorbar(data_UVM2['jd'],data_UVM2['flux'],yerr=data_UVM2['fluxerr'])
            pylab.title('Flux in UVM2')

            pylab.figure()
            pylab.errorbar(data_UVM2['jd'],data_UVM2['mag'],yerr=data_UVM2['magerr'])
            pylab.title('Mag in UVM2')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_UVM2['jd'],data_UVM2['absmag'],yerr=data_UVM2['absmagerr'])
            pylab.title('AbsMag in UVM2')
            pylab.gca().invert_yaxis()
        #pylab.show()
        data_dic['UVM2'] = data_UVM2  # adds the data_UVM2 to the dictionnaries

    #B
    if 'B' in filt:
        print('B is among the filters')
        data_B=dict()
        mag_B=mag[(filt=='B')]
        magerr_B = magerr[filt == 'B']
        #print(mag_B)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/Swift_B.rtf', delimiter=None)
        Filter_B = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='UW1', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_B=magnitudes.magAB_in_filter_to_flux_in_filter(mag_B,Filter_vector=None,Filter_object=Filter_B).magnitude
        #print(flux_B)
        fluxerr_B=magnitudes.error_on_mag_into_error_on_flux(magerr_B,flux_B)
        data_B['jd']=dates[(filt=='B')]
        data_B['mag']=mag_B
        data_B['magerr']=magerr_B
        data_B['flux']=flux_B
        data_B['fluxerr']=fluxerr_B
        data_B['absmag']=absmag[(filt=='B')]
        data_B['absmagerr']=magerr_B
        if plot_all == True:
            pylab.figure()
            pylab.errorbar(data_B['jd'],data_B['flux'],yerr=data_B['fluxerr'])
            pylab.title('Flux in B')

            pylab.figure()
            pylab.errorbar(data_B['jd'],data_B['mag'],yerr=data_B['magerr'])
            pylab.title('Mag in B')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_B['jd'],data_B['absmag'],yerr=data_B['absmagerr'])
            pylab.title('AbsMag in B')
            pylab.gca().invert_yaxis()
        #pylab.show()
        data_dic['B'] = data_B  # adds the data_UVW1 to the dictionnaries

    #V
    if 'V' in filt:
        print('V is among the filters')
        data_V=dict()
        mag_V=mag[(filt=='V')]
        magerr_V = magerr[filt == 'V']
        #print(mag_V)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/Swift_V.rtf', delimiter=None)
        Filter_V = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='UW1', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_V=magnitudes.magAB_in_filter_to_flux_in_filter(mag_V,Filter_vector=None,Filter_object=Filter_V).magnitude
        #print(flux_V)
        fluxerr_V=magnitudes.error_on_mag_into_error_on_flux(magerr_V,flux_V)
        data_V['jd']=dates[(filt=='V')]
        data_V['mag']=mag_V
        data_V['magerr']=magerr_V
        data_V['flux']=flux_V
        data_V['fluxerr']=fluxerr_V
        data_V['absmag']=absmag[(filt=='V')]
        data_V['absmagerr']=magerr_V
        if plot_all == True:
            pylab.figure()
            pylab.errorbar(data_V['jd'],data_V['flux'],yerr=data_V['fluxerr'])
            pylab.title('Flux in V')

            pylab.figure()
            pylab.errorbar(data_V['jd'],data_V['mag'],yerr=data_V['magerr'])
            pylab.title('Mag in V')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_V['jd'],data_V['absmag'],yerr=data_V['absmagerr'])
            pylab.title('AbsMag in V')
            pylab.gca().invert_yaxis()
        data_dic['V'] = data_V  # adds the data_UVW1 to the dictionnaries
        #pylab.show()

    #u
    if 'u' in filt:
        print('u is among the filters')
        data_u=dict()
        mag_u=mag[(filt=='u')]
        magerr_u = magerr[filt == 'u']
        #print(mag_u)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/Swift_u.rtf', delimiter=None)
        Filter_u = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='UW1', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_u=magnitudes.magAB_in_filter_to_flux_in_filter(mag_u,Filter_vector=None,Filter_object=Filter_u).magnitude
        #print(flux_u)
        fluxerr_u=magnitudes.error_on_mag_into_error_on_flux(magerr_u,flux_u)
        data_u['jd']=dates[(filt=='u')]
        data_u['mag']=mag_u
        data_u['magerr']=magerr_u
        data_u['flux']=flux_u
        data_u['fluxerr']=fluxerr_u
        data_u['absmag']=absmag[(filt=='u')]
        data_u['absmagerr']=magerr_u
        if plot_all == True:
            pylab.figure()
            pylab.errorbar(data_u['jd'],data_u['flux'],yerr=data_u['fluxerr'])
            pylab.title('Flux in u')

            pylab.figure()
            pylab.errorbar(data_u['jd'],data_u['mag'],yerr=data_u['magerr'])
            pylab.title('Mag in u')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_u['jd'],data_u['absmag'],yerr=data_u['absmagerr'])
            pylab.title('AbsMag in u')
            pylab.gca().invert_yaxis()
        data_dic['u'] = data_u # adds the data_UVW1 to the dictionnaries
        #pylab.show()


    ############### P48 ###############

    #R
    if 'r' in filt:
        print('r is among the filters')
        data_r=dict()
        mag_r=mag[(filt=='r')]
        magerr_r = magerr[filt == 'r']
        #print(mag_r)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/P48_R_T.rtf', delimiter=None)
        Filter_r = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='r', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_r=magnitudes.magAB_in_filter_to_flux_in_filter(mag_r,Filter_vector=None,Filter_object=Filter_r).magnitude
        #print(flux_r)
        fluxerr_r=magnitudes.error_on_mag_into_error_on_flux(magerr_r,flux_r)
        data_r['jd']=dates[(filt=='r')]
        data_r['mag']=mag_r
        data_r['magerr']=magerr_r
        data_r['flux']=flux_r
        data_r['fluxerr']=fluxerr_r
        data_r['absmag']=absmag[(filt=='r')]
        data_r['absmagerr']=magerr_r
        if plot_all == True:
            pylab.figure()
            pylab.errorbar(data_r['jd'],data_r['flux'],yerr=data_r['fluxerr'])
            pylab.title('Flux in r')

            pylab.figure()
            pylab.errorbar(data_r['jd'],data_r['mag'],yerr=data_r['magerr'])
            pylab.title('Mag in r')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_r['jd'],data_r['absmag'],yerr=data_r['absmagerr'])
            pylab.title('AbsMag in r')
            pylab.gca().invert_yaxis()
        ##pylab.show()
        data_dic['r'] = data_r  # adds the data_UVW1 to the dictionnaries

    if 'g' in filt:
        print('g is among the filters')
        data_g=dict()
        mag_g=mag[(filt=='g')]
        magerr_g = magerr[filt == 'g']
        #print(mag_r)
        Transmission = np.genfromtxt('/home/jinlng/test_dir/Type_IIn/Filters/Filters/PTF_G.rtf', delimiter=None)
        Filter_g = pyphot.Filter(Transmission[:, 0], Transmission[:, 1], name='g', dtype='photon',unit='Angstrom')
            #else:
            #    f = lib.find(s[0].lower())  # filter family
            #    for name_filter in f:
            #        lib[name_filter].info(show_zeropoints=True)
            #    P = lib[s[1]]  # filter name
        flux_g=magnitudes.magAB_in_filter_to_flux_in_filter(mag_g,Filter_vector=None,Filter_object=Filter_g).magnitude
        #print(flux_r)
        fluxerr_g=magnitudes.error_on_mag_into_error_on_flux(magerr_g,flux_g)
        data_g['jd']=dates[(filt=='g')]
        data_g['mag']=mag_g
        data_g['magerr']=magerr_g
        data_g['flux']=flux_g
        data_g['fluxerr']=fluxerr_g
        data_g['absmag']=absmag[(filt=='g')]
        data_g['absmagerr']=magerr_g
        if plot_all == True:
            pylab.figure()
            pylab.errorbar(data_g['jd'],data_g['flux'],yerr=data_g['fluxerr'])
            pylab.title('Flux in g')

            pylab.figure()
            pylab.errorbar(data_g['jd'],data_g['mag'],yerr=data_g['magerr'])
            pylab.title('Mag in g')
            pylab.gca().invert_yaxis()

            pylab.figure()
            pylab.errorbar(data_g['jd'],data_g['absmag'],yerr=data_g['absmagerr'])
            pylab.title('AbsMag in g')
            pylab.gca().invert_yaxis()
        ##pylab.show()
        data_dic['g'] = data_g  # adds the data_UVW1 to the dictionnaries

    #g

    #print(data_UVM2['jd'])
    #print(data_UVW1['jd'])
    #print(data_UVW2['jd'])
    #pdb.set_trace()
    return data_dic

def read_data_Marshall_simple(path,plot_all=True,no99=False,filters_directory=None):
    """Description: Reads data from a file downloaeded from the Marshall and outputs as many dictionnaries as filters,
    with the relevant data in them
        Input  :- a path to an ascii file downloaded from the Marshall
                - plot_all: if True, plots all the light curves for each filter
        Output :-data_dict: a dictionnary with keys ['jd','mag','magerr','flux','fluxerr','absmag','absmagerr','filter','instr'] and values a numpy array
        with the corresponding data
        Tested : ?
             By : Maayane T. Soumagnac Nov 2016
            URL :
        Example:
        Reliable:  """
    data_dic=dict()
    #from the Marshal "export light curve"
    print('path is',path)

    with open(path) as csvfile:
            readCSV = csv.reader(csvfile, delimiter=',',skipinitialspace=True)
            headers = next(readCSV)#skip the header

            dates_mjd = []
            filt = []
            absmag = []
            mag = []
            magerr = []
            instr = []
            for row in readCSV:
                print('row is',row)
                print(np.shape(row))
                print(row[1])
                #pdb.set_trace()
                date_mjd = float(row[1])
                fi = row[2]
                absm = float(row[3])
                ma = float(row[4])
                maerr = float(row[5])
                inst = row[7]
                dates_mjd.append(date_mjd)
                #print(dates_mjd)
                filt.append(fi)
                absmag.append(absm)
                mag.append(ma)
                magerr.append(maerr)
                instr.append(inst)
    dates=np.array(dates_mjd,dtype=float)
    filt=np.array(filt,dtype=object)
    #print('filt is',filt)
    #pdb.set_trace()
    absmag=np.array(absmag,dtype=float)
    mag=np.array(mag,dtype=float)
    magerr=np.array(magerr,dtype=float)
    instr=np.array(instr,dtype=str)

    ############### Swift ###############
    data_full=dict()
    if no99==True:
        print('no99 is true')
        data_full['mag']=mag[mag!=99.0]
        data_full['jd']=dates[mag!=99.0]
        data_full['magerr'] = magerr[mag!=99.0]
        data_full['instr']= instr[mag!=99.0]
        data_full['filter']=filt[mag!=99.0]
    else:
        data_full['mag']=mag
        data_full['jd']=dates
        data_full['magerr'] = magerr
        data_full['instr']= instr
        data_full['filter']=filt
    print('data_full[filter] is',data_full['filter'])
    #print(type(data_full['filter']))
    #pdb.set_trace()
    for i,j in enumerate(data_full['filter']):
        if (data_full['filter'][i]=='r') & (data_full['instr'][i]=='P48+ZTF'):
            data_full['filter'][i]='r_p48'
        if (data_full['filter'][i]=='g') & (data_full['instr'][i]=='P48+ZTF'):
            data_full['filter'][i]='g_p48'
        if (data_full['filter'][i]=='i') & (data_full['instr'][i]=='P48+ZTF'):
            data_full['filter'][i]='i_p48'
        if (data_full['filter'][i]=='r') & (data_full['instr'][i]=='P60+SEDM'):
            data_full['filter'][i]='r_sdss'
        if (data_full['filter'][i]=='g') & (data_full['instr'][i]=='P60+SEDM'):
            data_full['filter'][i]='g_sdss'
        if (data_full['filter'][i]=='i') & (data_full['instr'][i]=='P60+SEDM'):
            data_full['filter'][i]='i_sdss'
        if (data_full['filter'][i]=='u') & (data_full['instr'][i]=='P60+SEDM'):
            data_full['filter'][i]='u_sdss'
        if (data_full['filter'][i].lower()=='u') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='u_swift'
        if (data_full['filter'][i].lower()=='uuu') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='u_swift'
        if (data_full['filter'][i].lower()=='v') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='v_swift'
        if (data_full['filter'][i].lower()=='uvv') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='v_swift'
        if (data_full['filter'][i].lower()=='b') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='b_swift'
        if (data_full['filter'][i].lower()=='ubb') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='b_swift'
        if (data_full['filter'][i].lower()=='uw1') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='uvw1'
        if (data_full['filter'][i].lower()=='uw2') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='uvw2'
        if (data_full['filter'][i].lower()=='um2') & (data_full['instr'][i]=='Swift+UVOT'):
            data_full['filter'][i]='uvm2'
        if (data_full['filter'][i].lower()=='r') & (data_full['instr'][i]=='LT+IOO'):
            data_full['filter'][i]='r_sdss'
        if (data_full['filter'][i].lower()=='g') & (data_full['instr'][i]=='LT+IOO'):
            data_full['filter'][i]='g_sdss'
        if (data_full['filter'][i].lower()=='i') & (data_full['instr'][i]=='LT+IOO'):
            data_full['filter'][i]='i_sdss'
        if (data_full['filter'][i].lower()=='u') & (data_full['instr'][i]=='LT+IOO'):
            data_full['filter'][i]='u_sdss'
        if (data_full['filter'][i].lower()=='z') & (data_full['instr'][i]=='LT+IOO'):
            data_full['filter'][i]='z_sdss'



    data_full['flux']=np.zeros(np.shape(data_full['mag'])[0])
    for i,j in enumerate(data_full['filter']):
        print('***')
        print(j)
        print(data_full['instr'][i])
        print('***')
        '''
        if data_full['instr'][i]=='Swift+UVOT':
            [P, wav] = get_filter.make_filter_object([[str('Swift'), j]])
        elif data_full['instr'][i]=='P48+ZTF':
            [P, wav] = get_filter.make_filter_object([[str('ptf_p48'), j]])
        elif data_full['instr'][i]=='P60+SEDM':
            [P, wav] = get_filter.make_filter_object([[str('sdss'), j]])
        '''
        if (data_full['filter'][i]=='r_p48') & (data_full['instr'][i]=='P48+ZTF'):
            [P, wav] = get_filter.make_filter_object([[str('ztf_p48'),'r_p48']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='g_p48') & (data_full['instr'][i]=='P48+ZTF'):
            [P, wav] = get_filter.make_filter_object([[str('ztf_p48'), 'g_p48']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='i_p48') & (data_full['instr'][i]=='P48+ZTF'):
            [P, wav] = get_filter.make_filter_object([[str('ztf_p48'), 'i_p48']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='r_sdss') & (data_full['instr'][i]=='P60+SEDM'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'r_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='g_sdss') & (data_full['instr'][i]=='P60+SEDM'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'g_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='i_sdss') & (data_full['instr'][i]=='P60+SEDM'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'i_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='u_sdss') & (data_full['instr'][i]=='P60+SEDM'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'u_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i].lower()=='u_swift') & (data_full['instr'][i]=='Swift+UVOT'):
            [P, wav] = get_filter.make_filter_object([[str('swift'), 'u_swift']],filters_directory=filters_directory)
        #if (data_full['filter'][i].lower()=='uuu') & (data_full['instr'][i]=='Swift+UVOT'):
        #    [P, wav] = get_filter.make_filter_object([[str('swift'), 'u_swift']])
        if (data_full['filter'][i].lower()=='v_swift') & (data_full['instr'][i]=='Swift+UVOT'):
            [P, wav] = get_filter.make_filter_object([[str('swift'), 'v_swift']],filters_directory=filters_directory)
        #if (data_full['filter'][i].lower()=='uvv') & (data_full['instr'][i]=='Swift+UVOT'):
        #    [P, wav] = get_filter.make_filter_object([[str('swift'), 'v_swift']])
        if (data_full['filter'][i].lower()=='b_swift') & (data_full['instr'][i]=='Swift+UVOT'):
            [P, wav] = get_filter.make_filter_object([[str('swift'), 'b_swift']],filters_directory=filters_directory)
        #if (data_full['filter'][i].lower()=='ubb') & (data_full['instr'][i]=='Swift+UVOT'):
        #    [P, wav] = get_filter.make_filter_object([[str('swift'), 'b_swift']])
        if (data_full['filter'][i].lower()=='uw1') & (data_full['instr'][i]=='Swift+UVOT'):
            [P, wav] = get_filter.make_filter_object([[str('swift'), 'uvw1']],filters_directory=filters_directory)
        if (data_full['filter'][i].lower()=='uw2') & (data_full['instr'][i]=='Swift+UVOT'):
            [P, wav] = get_filter.make_filter_object([[str('swift'), 'uvw2']],filters_directory=filters_directory)
        if (data_full['filter'][i].lower()=='um2') & (data_full['instr'][i]=='Swift+UVOT'):
            [P, wav] = get_filter.make_filter_object([[str('swift'), 'uvm2']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='u_sdss') & (data_full['instr'][i]=='LT+IOO'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'u_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='r_sdss') & (data_full['instr'][i]=='LT+IOO'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'r_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='g_sdss') & (data_full['instr'][i]=='LT+IOO'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'g_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='i_sdss') & (data_full['instr'][i]=='LT+IOO'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'i_sdss']],filters_directory=filters_directory)
        if (data_full['filter'][i]=='z_sdss') & (data_full['instr'][i]=='LT+IOO'):
            [P, wav] = get_filter.make_filter_object([[str('sdss'), 'z_sdss']],filters_directory=filters_directory)



        data_full['flux'][i] = magnitudes.magAB_in_filter_to_flux_in_filter(data_full['mag'][i], Filter_vector=None,
                                                                 Filter_object=P['filter_object']).magnitude
    data_full['fluxerr']= magnitudes.error_on_mag_into_error_on_flux(data_full['magerr'],data_full['flux'])
    data_full['absmag']=absmag
    data_full['absmagerr']=magerr

    return data_full